{
  "version": 3,
  "sources": ["../src/pomodoro-menu-bar.tsx", "../lib/constants.ts", "../lib/intervals.tsx", "../lib/secondsToTime.tsx"],
  "sourcesContent": ["import { MenuBarExtra, Icon, launchCommand, LaunchType, Image, Color } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport { FocusText, LongBreakText, ShortBreakText } from \"../lib/constants\";\nimport {\n  createInterval,\n  getCurrentInterval,\n  resetInterval,\n  pauseInterval,\n  continueInterval,\n  isPaused,\n  duration,\n  preferences,\n  progress,\n} from \"../lib/intervals\";\nimport { secondsToTime } from \"../lib/secondsToTime\";\nimport { Interval, IntervalType } from \"../lib/types\";\n\nconst IconTint: Color.Dynamic = {\n  light: \"#000000\",\n  dark: \"#FFFFFF\",\n  adjustContrast: false,\n};\n\nexport default function TogglePomodoroTimer() {\n  const [currentInterval, setCurrentInterval] = useState<Interval | undefined>(getCurrentInterval());\n\n  if (currentInterval && progress(currentInterval) >= 100) {\n    try {\n      launchCommand({\n        name: \"pomodoro-control-timer\",\n        type: LaunchType.UserInitiated,\n        context: { currentInterval },\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  function onStart(type: IntervalType) {\n    setCurrentInterval(createInterval(type));\n  }\n\n  function onPause() {\n    setCurrentInterval(pauseInterval());\n  }\n\n  function onContinue() {\n    setCurrentInterval(continueInterval());\n  }\n\n  function onReset() {\n    resetInterval();\n    setCurrentInterval(undefined);\n  }\n\n  let icon: Image.ImageLike;\n  icon = { source: \"tomato-0.png\", tintColor: IconTint };\n  if (currentInterval) {\n    const progressInTenth = 100 - Math.floor(progress(currentInterval) / 10) * 10;\n    icon = { source: `tomato-${progressInTenth}.png`, tintColor: IconTint };\n  }\n\n  const title = preferences.enableTimeOnMenuBar\n    ? currentInterval\n      ? secondsToTime(currentInterval.length - duration(currentInterval))\n      : \"--:--\"\n    : undefined;\n\n  return (\n    <MenuBarExtra icon={icon} title={title} tooltip={\"Pomodoro\"}>\n      {currentInterval ? (\n        <>\n          {isPaused(currentInterval) ? (\n            <MenuBarExtra.Item\n              title=\"Continue\"\n              icon={Icon.Play}\n              onAction={onContinue}\n              shortcut={{ modifiers: [\"cmd\"], key: \"c\" }}\n            />\n          ) : (\n            <MenuBarExtra.Item\n              title=\"Pause\"\n              icon={Icon.Pause}\n              onAction={onPause}\n              shortcut={{ modifiers: [\"cmd\"], key: \"p\" }}\n            />\n          )}\n          <MenuBarExtra.Item\n            title=\"Reset\"\n            icon={Icon.Stop}\n            onAction={onReset}\n            shortcut={{ modifiers: [\"cmd\"], key: \"r\" }}\n          />\n        </>\n      ) : (\n        <>\n          <MenuBarExtra.Item\n            title={FocusText}\n            subtitle={`${preferences.focusIntervalDuration}:00`}\n            icon={`\uD83C\uDFAF`}\n            onAction={() => onStart(\"focus\")}\n            shortcut={{ modifiers: [\"cmd\"], key: \"f\" }}\n          />\n          <MenuBarExtra.Item\n            title={ShortBreakText}\n            subtitle={`${preferences.shortBreakIntervalDuration}:00`}\n            icon={`\uD83E\uDDD8\u200D\u2642\uFE0F`}\n            onAction={() => onStart(\"short-break\")}\n            shortcut={{ modifiers: [\"cmd\"], key: \"s\" }}\n          />\n          <MenuBarExtra.Item\n            title={LongBreakText}\n            subtitle={`${preferences.longBreakIntervalDuration}:00`}\n            icon={`\uD83D\uDEB6`}\n            onAction={() => onStart(\"long-break\")}\n            shortcut={{ modifiers: [\"cmd\"], key: \"l\" }}\n          />\n        </>\n      )}\n    </MenuBarExtra>\n  );\n}\n", "export const FocusText = 'Focus'\nexport const ShortBreakText = 'Short Break'\nexport const LongBreakText = 'Long Break'", "import { Cache, getPreferenceValues } from \"@raycast/api\";\nimport { FocusText, LongBreakText, ShortBreakText } from \"./constants\";\nimport { Interval, IntervalExecutor, IntervalType } from \"./types\";\n\nconst cache = new Cache();\n\nconst CURRENT_INTERVAL_CACHE_KEY = \"pomodoro-interval/1.1\";\nconst COMPLETED_POMODORO_COUNT_CACHE_KEY = \"pomodoro-interval/completed-pomodoro-count\"\n\nconst currentTimestamp = () => Math.round(new Date().valueOf() / 1000);\n\nexport function duration({ parts }: Interval): number {\n  return parts.reduce((acc, part) => {\n    return (\n      (typeof part.pausedAt !== \"undefined\" ? part.pausedAt - part.startedAt : currentTimestamp() - part.startedAt) +\n      acc\n    );\n  }, 0);\n}\n\nexport function progress(interval: Interval): number {\n  return (duration(interval) / interval.length) * 100;\n}\n\nexport function isPaused({ parts }: Interval): boolean {\n  return !!parts[parts.length - 1].pausedAt;\n}\n\nexport function createInterval(type: IntervalType, isFreshStart: boolean = true): Interval {\n  const interval = {\n    type,\n    length: intervalDurations[type],\n    parts: [\n      {\n        startedAt: currentTimestamp(),\n      },\n    ],\n  };\n  cache.set(CURRENT_INTERVAL_CACHE_KEY, JSON.stringify(interval));\n  if (isFreshStart) {\n    cache.set(COMPLETED_POMODORO_COUNT_CACHE_KEY, \"0\")\n  } else {\n    const lastCount = parseInt(cache.get(COMPLETED_POMODORO_COUNT_CACHE_KEY) ?? \"0\", 10)\n    cache.set(COMPLETED_POMODORO_COUNT_CACHE_KEY, `${lastCount + 1}`)\n  }\n  return interval;\n}\n\nexport function pauseInterval() {\n  let interval = getCurrentInterval();\n  if (interval) {\n    const parts = [...interval.parts];\n    parts[parts.length - 1].pausedAt = currentTimestamp();\n    interval = {\n      ...interval,\n      parts,\n    };\n    cache.set(CURRENT_INTERVAL_CACHE_KEY, JSON.stringify(interval));\n  }\n  return interval;\n}\n\nexport function continueInterval() {\n  let interval = getCurrentInterval();\n  if (interval) {\n    const parts = [...interval.parts, { startedAt: currentTimestamp() }];\n    interval = {\n      ...interval,\n      parts,\n    };\n    cache.set(CURRENT_INTERVAL_CACHE_KEY, JSON.stringify(interval));\n  }\n  return interval;\n}\n\nexport function resetInterval() {\n  cache.remove(CURRENT_INTERVAL_CACHE_KEY);\n}\n\nexport function getCurrentInterval(): Interval | undefined {\n  const result = cache.get(CURRENT_INTERVAL_CACHE_KEY);\n  if (result) {\n    return JSON.parse(result);\n  }\n}\n\nfunction getCompletedPomodoroCount(): number {\n  const result = cache.get(COMPLETED_POMODORO_COUNT_CACHE_KEY)\n  if (result) {\n    return parseInt(result, 10)\n  }\n\n  return 0\n}\n\nexport function getNextIntervalExecutor(): IntervalExecutor {\n  const currentInterval = getCurrentInterval()\n  resetInterval()\n\n  const completedCount = getCompletedPomodoroCount()\n  const longBreakThreshold = parseInt(preferences.longBreakStartThreshold, 10)\n  let executor: IntervalExecutor | undefined\n  switch (currentInterval?.type) {\n    case \"short-break\":\n      executor = { title: FocusText, onStart: () => createInterval('focus', false) }\n      break\n    case \"long-break\":\n      executor = { title: FocusText, onStart: () => createInterval('focus') }\n      break\n    default:\n      if (completedCount === longBreakThreshold) {\n        executor = {\n          title: LongBreakText,\n          onStart: () => createInterval('long-break')\n        }\n      } else {\n        executor = {\n          title: ShortBreakText,\n          onStart: () => createInterval('short-break', false)\n        }\n      }\n      break\n  }\n\n  return executor\n}\n\nexport const preferences = getPreferenceValues<Preferences>();\nexport const intervalDurations: Record<IntervalType, number> = {\n  focus: parseInt(preferences.focusIntervalDuration) * 60,\n  \"short-break\": parseInt(preferences.shortBreakIntervalDuration) * 60,\n  \"long-break\": parseInt(preferences.longBreakIntervalDuration) * 60,\n};\n", "export function secondsToTime(secondsToDisplay: number): string {\n  if (secondsToDisplay <= 0) {\n    return \"00:00\";\n  }\n  const minutes = Math.floor(secondsToDisplay / 60);\n  const seconds = secondsToDisplay % 60;\n  return `${minutes < 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;\n}\n"],
  "mappings": "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",
  "names": ["pomodoro_menu_bar_exports", "__export", "TogglePomodoroTimer", "__toCommonJS", "import_api", "import_react", "FocusText", "ShortBreakText", "LongBreakText", "import_api", "cache", "CURRENT_INTERVAL_CACHE_KEY", "COMPLETED_POMODORO_COUNT_CACHE_KEY", "currentTimestamp", "duration", "parts", "acc", "part", "progress", "interval", "isPaused", "createInterval", "type", "isFreshStart", "intervalDurations", "lastCount", "pauseInterval", "getCurrentInterval", "continueInterval", "resetInterval", "result", "preferences", "intervalDurations", "secondsToTime", "secondsToDisplay", "minutes", "seconds", "import_jsx_runtime", "IconTint", "TogglePomodoroTimer", "currentInterval", "setCurrentInterval", "getCurrentInterval", "progress", "error", "onStart", "type", "createInterval", "onPause", "pauseInterval", "onContinue", "continueInterval", "onReset", "resetInterval", "icon", "title", "preferences", "secondsToTime", "duration", "isPaused", "FocusText", "ShortBreakText", "LongBreakText"]
}
